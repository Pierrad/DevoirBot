{"version":3,"sources":["components/ProjectList/styles.js","components/ProjectItem/styles.js","components/ProjectItem/index.js","components/ProjectItems/index.js","components/ProjectList/index.js","components/ProjectList/wrapper.js","components/SwitchTheme/index.js","Theme.js","App.js","reportWebVitals.js","index.js"],"names":["ProjectListBox","styled","div","ProjetListCard","ProjectListCardName","p","props","color","ProjectItemBox","ProjectItemModalContainer","ProjectItemModal","theme","body","ProjectItemModalCloseButton","ProjectItemModalContent","ProjectItemModalBasicText","ProjectItem","data","useState","modalOpen","setModalOpen","darkmode","useDarkMode","handleClick","onClick","content","date","value","src","alt","ProjectItems","map","d","key","ProjectList","setColor","colorLoader","Math","floor","random","toString","useEffect","Array","Object","keys","length","i","name","tasks","loading","css","size","ProjectListWrapper","setData","fetch","then","res","json","response","SwitchTheme","className","onChange","toggle","checked","uncheckedHandleIcon","width","checkedHandleIcon","uncheckedIcon","checkedIcon","offColor","onColor","lightTheme","text","toggleBorder","background","darkTheme","GlobalStyles","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4afb7a9a.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const ProjectListBox = styled.div`\n  display: flex;\n  width: 100%;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nexport const ProjetListCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 2rem 2rem;\n  border-radius: 0.5rem;\n  border: 1px solid black;\n  height: 12rem;\n  width: 10rem;\n  margin: 0 2rem 1rem 0;\n  transition: all 0.2s ease 0s;\n  overflow: scroll;\n  &:hover {\n    box-shadow: rgba(84, 84, 84, 0.2) 0px 5px 30px;\n  }\n  @media (max-width: 768px) {\n    margin: 0 0 1rem 0;\n  }\n`\n\nexport const ProjectListCardName = styled.p`\n  font-size: 2rem;\n  margin: 0;\n  color: ${(props) => props.color};\n`\n","import styled from 'styled-components'\n\nexport const ProjectItemBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid grey;\n  border-radius: 0.5rem;\n  padding: 0.5rem;\n  cursor: pointer;\n  margin: 0.5rem 0rem;\n`\n\nexport const ProjectItemModalContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.5);\n`\n\nexport const ProjectItemModal = styled.div`\n  position: fixed;\n  justify-content: center;\n  align-items: center;\n  width: 30rem;\n  height: 20rem;\n  z-index: 100;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: ${({ theme }) => theme.body};\n  filter: drop-shadow(4px 4px 4px rgba(0, 0, 0, 0.25));\n  border-radius: 2rem;\n  padding: 1rem;\n  @media (max-width: 768px) {\n    width: 18rem;\n  }\n`\n\nexport const ProjectItemModalCloseButton = styled.div`\n  position: absolute;\n  right: 1rem;\n  cursor: pointer;\n`\n\nexport const ProjectItemModalContent = styled.div`\n  padding: 2rem 1rem;\n`\n\nexport const ProjectItemModalBasicText = styled.p`\n  font-size: 1rem;\n  font-weight: bold;\n`","import React, { useState } from 'react'\nimport useDarkMode from 'use-dark-mode'\n\nimport * as SC from './styles'\n\nfunction ProjectItem(props) {\n  const { data } = props\n\n  const [modalOpen, setModalOpen] = useState(false)\n  const darkmode = useDarkMode(true)\n\n  const handleClick = () => {\n    setModalOpen(!modalOpen)\n  }\n\n  return (\n    <>\n      <SC.ProjectItemBox onClick={handleClick}>\n        <p>{data.content}</p>\n        <p>{data.date}</p>\n      </SC.ProjectItemBox>\n      {modalOpen && (\n        <SC.ProjectItemModalContainer>\n          <SC.ProjectItemModal>\n            <SC.ProjectItemModalCloseButton onClick={handleClick}>\n              {darkmode.value\n                ? <img src=\"cancel_light.png\" alt='Hide modal' />\n                : <img src=\"cancel_black.png\" alt='Hide modal' />\n              }\n            </SC.ProjectItemModalCloseButton>\n            <SC.ProjectItemModalContent>\n              <SC.ProjectItemModalBasicText>A faire : </SC.ProjectItemModalBasicText>\n              <p>{data.content}</p>\n              <SC.ProjectItemModalBasicText>Pour le : </SC.ProjectItemModalBasicText>\n              <p>{data.date}</p>\n            </SC.ProjectItemModalContent>\n            \n          </SC.ProjectItemModal>\n        </SC.ProjectItemModalContainer>\n      )}\n    </>\n  )\n}\n\nexport default ProjectItem","import React from 'react'\nimport * as SC from './styles'\n\nimport ProjectItem from '../ProjectItem/index'\n\nfunction ProjectItems(props) {\n  const { data } = props\n\n  return (\n    <div>{data.map((d, key) => <ProjectItem key={key} data={d}/> )}</div>\n  )\n}\n\nexport default ProjectItems","import React, { useState, useEffect } from 'react'\nimport * as SC from './styles'\nimport PacmanLoader from \"react-spinners/PacmanLoader\"\n\nimport ProjectItem from '../ProjectItems/index'\n\n\nfunction ProjectList(props) {\n  const { data } = props\n  const [color, setColor] = useState(null)\n  const colorLoader = '#' + Math.floor(Math.random() * 16777215).toString(16)\n\n  const loader = `\n    display: block;\n    margin: 0 auto;\n  `\n\n  useEffect(() => {\n    if (data) { \n      setColor([...Array(Object.keys(data).length).keys()].map((key) => '#' + Math.floor(Math.random() * 16777215).toString(16)))\n    } \n  }, [data])\n\n  return (\n    (data && (\n      <SC.ProjectListBox>\n        {Object.keys(data).map((key, i) => (\n          <>\n            <SC.ProjetListCard key={i}>\n              <SC.ProjectListCardName color={color ? color[i] : '#000'}>{data[key].name}</SC.ProjectListCardName>\n              <ProjectItem data={data[key].tasks} />\n            </SC.ProjetListCard>\n          </>\n        ))}\n      </SC.ProjectListBox>\n    )) || <PacmanLoader color={colorLoader} loading={true} css={loader} size={40}/>\n  )\n}\n\nexport default ProjectList","import React, { useEffect, useState } from 'react'\n\nimport ProjectList from './index'\n\nfunction ProjectListWrapper() {\n  const [data, setData] = useState(null)\n\n  useEffect(() => {\n    fetch(`https://devoir-bot.herokuapp.com/projectWithTask`).then(res => res.json()).then(data => {\n      setData(data.response)\n    })\n  }, [])\n\n  return <ProjectList data={data}/>\n}\n\nexport default ProjectListWrapper","import React from 'react'\nimport useDarkMode from 'use-dark-mode'\nimport Switch from 'react-switch'\n\nfunction SwitchTheme(props) {\n  const { className } = props\n\n  const darkmode = useDarkMode(true)\n\n  const handleChange = () => {\n    darkmode.toggle()\n  }\n\n  return (\n    <Switch\n      className={className}\n      onChange={handleChange}\n      checked={!darkmode.value}\n      uncheckedHandleIcon={<img width=\"95%\" src=\"moon.png\" alt=\"Moon toggle\"/>}\n      checkedHandleIcon={<img width=\"95%\" src=\"sun.png\" alt=\"Sun toggle\"/>}\n      uncheckedIcon={false}\n      checkedIcon={false}\n      offColor=\"#8C30F5\"\n      onColor=\"#F6AE2D\"\n    />\n  )\n}\n\nexport default SwitchTheme\n","import { createGlobalStyle} from \"styled-components\"\n\nexport const lightTheme = {\n  body: '#FFF',\n  text: '#363537',\n  toggleBorder: '#FFF',\n  background: '#363537',\n}\n\nexport const darkTheme = {\n  body: '#363537',\n  text: '#FAFAFA',\n  toggleBorder: '#6B8096',\n  background: '#999',\n}\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n    transition: all 0.50s linear;\n  }\n`","import './App.css'\nimport React from 'react'\nimport useDarkMode from 'use-dark-mode'\nimport { ThemeProvider } from \"styled-components\"\n\nimport ProjectListWrapper from './components/ProjectList/wrapper'\nimport SwitchTheme from './components/SwitchTheme/index'\nimport { GlobalStyles, lightTheme, darkTheme } from \"./Theme\"\n\n\nfunction App() {\n  const darkmode = useDarkMode(true)\n  const theme = darkmode.value ? darkTheme : lightTheme\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <div className=\"HighWrapper\">\n        <div className=\"Header\">\n          <h1>DevoirBot</h1>\n          <SwitchTheme className=\"SwitchTheme\"/>\n        </div>\n        <div className=\"ProjectList\">\n          <ProjectListWrapper />\n        </div>\n      </div>\n    </ThemeProvider>\n    \n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}